task createSubproject {
    //adds the task to the Help tasks group
    group = 'Help'
    //Describes what the task does
    description = "Creates an empty subproject and includes it in the build"

    // Wrapping the 'worker' task does not run the task when e.g. gradle tasks is called
    doLast {
        tasks.create("createSubprojectExec") {

            if (!project.properties.containsKey("subPackage")) {
                throw new IllegalAccessException("Please supply -PsubPackage=...")
            }

            printf("Creating subproject ${subPackage}\n")
            String pkgName = project.property("group") + '.' + subPackage
            String pkgDir = pkgName.replace('.', '/')

            createDirectoryStructure(pkgDir)
            createBuildFile(subPackage)

            includeProjectInBuild()
            printf("Subproject created\n")
        }
    }
}

private void createDirectoryStructure(String pkgDir) {
    def subDirName = subPackage.replace('.', '/')
    printf("Creating directory ${subDirName}\n")
    mkdir subDirName

    printf("Creating src folders for ${pkgDir}\n")
    mkdir "${subDirName}/src/main/java/${pkgDir}"
    mkdir "${subDirName}/src/test/java/${pkgDir}"
}

private void createBuildFile(subPackage) {
    def buildTemplate = """
plugins {
    id 'java-library-conventions'
}

dependencies {
}
"""
    printf("Creating build.gradle\n")
    new File(subPackage.replace('.', '/'), 'build.gradle').text = buildTemplate
}

private void includeProjectInBuild() {
    printf("Adding subproject to settings.gradle\n")
    var settingsFile = new File('settings.gradle')
    var projectPath = ':' + subPackage.replace('.', ':')
    settingsFile.append("\ninclude('${projectPath}')")
}
